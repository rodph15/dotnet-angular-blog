# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - main/*

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UseDotNet@2
  inputs:
    version: '6.0.x'
    includePreviewVersions: false
    performMultiLevelLookup: true

- task: UseDotNet@2
  inputs:
    version: '6.0.x'
    packageType: runtime

- task: DotNetCoreCLI@2
  displayName: "Restore packages"
  inputs:
    command: 'restore'
    projects: '$(service)'
    feedsToUse: 'select'

- task: DotNetCoreCLI@2
  displayName: "Build Application"
  inputs:
    command: 'build'
    projects: '$(service)'
    arguments: '--configuration --configuration Release --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

- task: DotNetCoreCLI@2
  displayName: "Running Tests"
  inputs:
    command: test
    projects: '*.Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=json%2cCobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/ /p:MergeWith="$(Build.SourcesDirectory)/TestResults/Coverage/coverage.json'
    publishTestResults: true

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

- task: PublishBuildArtifacts@1
  displayName: "Publishing Artifacts"
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: '$(Build.ArtifactStagingDirectory)/$(service)_$(Build.SourceVersion)_$(Build.BuildId)'
    publishLocation: 'Container'
